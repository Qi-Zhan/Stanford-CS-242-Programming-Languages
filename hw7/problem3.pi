

def VALUE = &sem. (
    # INITIAL STATE
    # The code here should receive the new value, and send it into `sem`.
    # In other words, we are using `sem` both as a semaphore, and as
    #   storage for the current value!
    req <- set . val <- req . val -> sem . 0

    |

    # STEADY STATE
    # We first receive the current value (and also acquire the lock).
    # In case of `set`, we should send the new value into `sem`.
    # In case of `get`, we should service the request, but then send the
    #   original value into `sem` since the value did not change.

    !val <- sem.
     ((req <- set. new_val <- req . new_val -> sem . 0)
      +
      (req <- get . val -> req . val -> sem . 0))
);



# Some tests.
def GET = &req. req -> get. current <- req. current -> result. 0;
def SET_A_GET = &req. req -> set. a -> req. GET;
def SET_AB_GET = &req. req -> set. a -> req. &req. req -> set. b -> req. GET;
def SET_A_or_B_GET = &finished. (&req. req -> set. a -> req. void -> finished.0 |
                                 &req. req -> set. b -> req. void -> finished.0 |
                                 _ <- finished. _ <- finished. GET);

def GET_GET = &req. req -> get. current <- req. current -> result1. 0
            | &req. req -> get. current <- req. current -> result2. 0;
def SET_A_GET_GET = &req. req -> set. a -> req. GET_GET;

# Expected Output:
#   a -> result. 0
# | ...
VALUE | SET_A_GET;


# Expected Output:
#   b -> result. 0
# | ...
VALUE | SET_AB_GET;

# This tests two concurrent requests. The result depends on non-deterministic choice
# Expected Output:
# --- State 0 ---
#   a -> result. 0
# | ...
# --- State 1 ---
#   b -> result. 0
# | ...
VALUE | SET_A_or_B_GET;

# Expected Output:
#   a -> result1. 0
# | a -> result2. 0
# | ...
VALUE | SET_A_GET_GET;


