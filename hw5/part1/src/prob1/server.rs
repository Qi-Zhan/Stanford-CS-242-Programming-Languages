/* DO NOT EDIT THIS FILE. */

/***************
 * NOTE:
 *   To implement `cart.rs`, you only need to understand
 *   the signature and specification of `internal_login`.
 *   You do not need to understand other parts.
 ***************/

/* USER_DB:
 *   - private database that stores (id, pw, acct_num) information of all users. */
static USER_DB: [(&'static str, &'static str, u32); 3] = [
    ("id1", "pw1", 123),
    ("id2", "pw2", 456),
    ("id3", "pw3", 789),
];

/* internal_login(id, pw):
 *   - return `Some(acct_num)`, if `(id, pw, acct_num)` is in `USER_DB` (i.e., login succeeds).
 *   - return `None`, if login fails. */
pub fn internal_login(id: String, pw: String) -> Option<u32> {
    let mut acct_num_opt: Option<u32> = None;
    for user in USER_DB.iter() {
        if id == user.0 && pw == user.1 {
            acct_num_opt = Some(user.2);
            break;
        }
    }
    acct_num_opt
}
